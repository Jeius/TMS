generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public"]
}

model User {
  instance_id                 String?      @db.Uuid
  id                          String       @id @db.Uuid
  aud                         String?      @db.VarChar(255)
  role                        String?      @db.VarChar(255)
  email                       String?      @unique @db.VarChar(255)
  encrypted_password          String?      @db.VarChar(255)
  email_confirmed_at          DateTime?    @db.Timestamptz(6)
  invited_at                  DateTime?    @db.Timestamptz(6)
  confirmation_token          String?      @db.VarChar(255)
  confirmation_sent_at        DateTime?    @db.Timestamptz(6)
  recovery_token              String?      @db.VarChar(255)
  recovery_sent_at            DateTime?    @db.Timestamptz(6)
  email_change_token_new      String?      @db.VarChar(255)
  email_change                String?      @db.VarChar(255)
  email_change_sent_at        DateTime?    @db.Timestamptz(6)
  last_sign_in_at             DateTime?    @db.Timestamptz(6)
  raw_app_meta_data           Json?
  raw_user_meta_data          Json?
  is_super_admin              Boolean?
  created_at                  DateTime?    @db.Timestamptz(6)
  updated_at                  DateTime?    @db.Timestamptz(6)
  phone                       String?      @unique
  phone_confirmed_at          DateTime?    @db.Timestamptz(6)
  phone_change                String?      @default("")
  phone_change_token          String?      @default("") @db.VarChar(255)
  phone_change_sent_at        DateTime?    @db.Timestamptz(6)
  confirmed_at                DateTime?    @db.Timestamptz(6)
  email_change_token_current  String?      @default("") @db.VarChar(255)
  email_change_confirm_status Int?         @default(0) @db.SmallInt
  banned_until                DateTime?    @db.Timestamptz(6)
  reauthentication_token      String?      @default("") @db.VarChar(255)
  reauthentication_sent_at    DateTime?    @db.Timestamptz(6)
  is_sso_user                 Boolean      @default(false)
  deleted_at                  DateTime?    @db.Timestamptz(6)
  is_anonymous                Boolean      @default(false)
  UserProfile                 UserProfile?

  @@index([instance_id])
  @@index([is_anonymous])
  @@map("users")
  @@schema("public")
}

model UserProfile {
  id                  String            @id @db.Uuid
  role_id             String?           @db.Uuid
  firstName           String?           @db.VarChar(100)
  lastName            String?           @db.VarChar(100)
  idNumber            String?           @unique @db.VarChar(15)
  themePreference     ThemePreference   @default(LIGHT)
  bio                 String?           @db.VarChar(500)
  avatar              String?           @db.VarChar(255)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime?
  accessControls      AccessControl[]
  activityLogs        ActivityLog[]
  messagesReceived    ChatMessage[]     @relation("UserReceiver")
  messagesSent        ChatMessage[]     @relation("UserSender")
  notifications       Notification[]
  reviewFeedbacks     ReviewFeedback[]
  thesesAdvised       Thesis[]          @relation("AdvisedTheses")
  thesesAuthored      Thesis[]          @relation("AuthorTheses")
  thesisReviews       ThesisReview[]
  user                User              @relation(fields: [id], references: [id])
  role                UserRole?         @relation(fields: [role_id], references: [id], onDelete: Restrict)
  defense_schedules   DefenseSchedule[] @relation("panel_schedules")
  theses_panel_theses Thesis[]          @relation("panel_theses")

  @@map("user_profiles")
  @@schema("public")
}

model UserRole {
  id           String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name         String        @unique
  userProfiles UserProfile[]

  @@map("user_roles")
  @@schema("public")
}

model Thesis {
  id                         String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title                      String
  abstract                   String
  proposalFile_id            String             @db.Uuid
  finalFile_id               String?            @db.Uuid
  status                     ThesisStatus
  author_id                  String             @db.Uuid
  adviser_id                 String?            @db.Uuid
  department_id              String             @db.Uuid
  college_id                 String             @db.Uuid
  createdAt                  DateTime           @default(now())
  updatedAt                  DateTime           @updatedAt
  specializations            specializations[]
  accessControls             AccessControl[]
  defenseSchedules           DefenseSchedule[]
  fileVersions               FileVersion[]
  plagiarismReports          PlagiarismReport[]
  reviewFeedbacks            ReviewFeedback[]
  adviser                    UserProfile?       @relation("AdvisedTheses", fields: [adviser_id], references: [id])
  author                     UserProfile        @relation("AuthorTheses", fields: [author_id], references: [id])
  college                    College            @relation(fields: [college_id], references: [id])
  department                 Department         @relation(fields: [department_id], references: [id])
  finalFile                  File?              @relation("FileFinal", fields: [finalFile_id], references: [id])
  proposalFile               File               @relation("FileProposal", fields: [proposalFile_id], references: [id])
  thesisMilestones           ThesisMilestone[]
  thesisReviews              ThesisReview[]
  user_profiles_panel_theses UserProfile[]      @relation("panel_theses")

  @@map("theses")
  @@schema("public")
}

model ThesisSpecialization {
  id              String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String            @unique
  specializations specializations[]

  @@map("specializations")
  @@schema("public")
}

model College {
  id          String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String       @unique
  departments Department[]
  theses      Thesis[]

  @@map("colleges")
  @@schema("public")
}

model Department {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name       String   @unique
  college_id String   @db.Uuid
  college    College  @relation(fields: [college_id], references: [id])
  theses     Thesis[]

  @@map("departments")
  @@schema("public")
}

model File {
  id                String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  filePath          String
  fileType          String
  fileVersions      FileVersion[]
  plagiarismReports PlagiarismReport[]
  thesisFinal       Thesis[]           @relation("FileFinal")
  thesisProposal    Thesis[]           @relation("FileProposal")

  @@map("files")
  @@schema("public")
}

model ChatMessage {
  id          String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  content     String
  sender_id   String      @db.Uuid
  receiver_id String      @db.Uuid
  createdAt   DateTime    @default(now())
  receiver    UserProfile @relation("UserReceiver", fields: [receiver_id], references: [id])
  sender      UserProfile @relation("UserSender", fields: [sender_id], references: [id])

  @@map("chat_messages")
  @@schema("public")
}

model Notification {
  id           String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  content      String
  isRead       Boolean     @default(false)
  createdAt    DateTime    @default(now())
  recipient_id String      @db.Uuid
  recipient    UserProfile @relation(fields: [recipient_id], references: [id])

  @@map("notifications")
  @@schema("public")
}

model FileVersion {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  thesis_id  String   @db.Uuid
  file_id    String   @db.Uuid
  version    Int
  uploadedAt DateTime @default(now())
  file       File     @relation(fields: [file_id], references: [id])
  thesis     Thesis   @relation(fields: [thesis_id], references: [id])

  @@map("file_versions")
  @@schema("public")
}

model ActivityLog {
  id         String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String      @db.Uuid
  action     String
  targetType String
  targetId   String
  createdAt  DateTime    @default(now())
  user       UserProfile @relation(fields: [user_id], references: [id])

  @@map("activity_logs")
  @@schema("public")
}

model PlagiarismReport {
  id              String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  thesis_id       String   @db.Uuid
  similarityScore Float
  reportFile_id   String   @db.Uuid
  checkedAt       DateTime @default(now())
  reportFile      File     @relation(fields: [reportFile_id], references: [id])
  thesis          Thesis   @relation(fields: [thesis_id], references: [id])

  @@map("plagiarism_reports")
  @@schema("public")
}

model ReviewFeedback {
  id          String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  thesis_id   String      @db.Uuid
  reviewer_id String      @db.Uuid
  content     String
  createdAt   DateTime    @default(now())
  reviewer    UserProfile @relation(fields: [reviewer_id], references: [id])
  thesis      Thesis      @relation(fields: [thesis_id], references: [id])

  @@map("review_feedbacks")
  @@schema("public")
}

model AccessControl {
  id         String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String      @db.Uuid
  thesis_id  String      @db.Uuid
  canEdit    Boolean     @default(false)
  canApprove Boolean     @default(false)
  canView    Boolean     @default(true)
  thesis     Thesis      @relation(fields: [thesis_id], references: [id])
  user       UserProfile @relation(fields: [user_id], references: [id])

  @@map("access_controls")
  @@schema("public")
}

model ThesisReview {
  id          String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  status      ReviewStatus
  thesis_id   String       @db.Uuid
  reviewer_id String       @db.Uuid
  feedback    String?
  createdAt   DateTime     @default(now())
  reviewer    UserProfile  @relation(fields: [reviewer_id], references: [id])
  thesis      Thesis       @relation(fields: [thesis_id], references: [id])

  @@map("thesis_reviews")
  @@schema("public")
}

model DefenseSchedule {
  id            String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  thesis_id     String        @db.Uuid
  date          DateTime
  venue         String
  createdAt     DateTime      @default(now())
  thesis        Thesis        @relation(fields: [thesis_id], references: [id])
  user_profiles UserProfile[] @relation("panel_schedules")

  @@map("defense_schedules")
  @@schema("public")
}

model ThesisMilestone {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  thesis_id String   @db.Uuid
  title     String
  startDate DateTime
  endDate   DateTime
  completed Boolean  @default(false)
  thesis    Thesis   @relation(fields: [thesis_id], references: [id])

  @@map("thesis_milestones")
  @@schema("public")
}

model specializations {
  A               String               @db.Uuid
  B               String               @db.Uuid
  theses          Thesis               @relation(fields: [A], references: [id], onDelete: Cascade, map: "_Specialization_A_fkey")
  specializations ThesisSpecialization @relation(fields: [B], references: [id], onDelete: Cascade, map: "_Specialization_B_fkey")

  @@unique([A, B], map: "_Specialization_AB_unique")
  @@index([B], map: "_Specialization_B_index")
  @@map("_specializations")
  @@schema("public")
}

enum ThemePreference {
  LIGHT
  DARK

  @@map("theme_preference")
  @@schema("public")
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
  REVISION_REQUIRED

  @@map("review_status")
  @@schema("public")
}

enum ThesisStatus {
  PROPOSAL_SUBMITTED
  UNDER_REVIEW
  FINAL_MANUSCRIPT
  APPROVED
  REJECTED

  @@map("thesis_status")
  @@schema("public")
}
