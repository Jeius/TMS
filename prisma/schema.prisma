generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Thesis {
  id                                   String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title                                String                 @unique
  abstract                             String?
  proposal_file_id                     String?                @db.Uuid
  final_file_id                        String?                @db.Uuid
  status                               ThesisStatus?
  department_id                        String?                @db.Uuid
  created_at                           DateTime               @default(now()) @db.Timestamptz(6)
  updated_at                           DateTime?              @db.Timestamptz(6)
  deleted_at                           DateTime?              @db.Timestamptz(6)
  year_approved                        Int?
  accessControls                       AccessControl[]
  advisers                             Advisers[]
  authors                              Author[]
  defenseSchedules                     DefenseSchedule[]
  fileVersions                         FileVersion[]
  milestones                           Milestone[]
  panelists                            Panelist[]
  plagiarismReports                    PlagiarismReport[]
  reviews                              Review[]
  specializations                      ThesisSpecialization[]
  department                           Department?            @relation(fields: [department_id], references: [id], onDelete: Restrict)
  files_theses_final_file_idTofiles    File?                  @relation("theses_final_file_idTofiles", fields: [final_file_id], references: [id], map: "theses_finalFile_id_fkey")
  files_theses_proposal_file_idTofiles File?                  @relation("theses_proposal_file_idTofiles", fields: [proposal_file_id], references: [id], onDelete: Restrict, map: "theses_proposalFile_id_fkey")

  @@map("theses")
}

model ThesisSpecialization {
  thesis_id           String            @db.Uuid
  tag_id              BigInt
  created_at          DateTime          @default(now()) @db.Timestamp(6)
  deleted_at          DateTime?         @db.Timestamp(6)
  updated_at          DateTime?         @db.Timestamp(6)
  specialization_tags SpecializationTag @relation(fields: [tag_id], references: [id], onDelete: Cascade)
  theses              Thesis            @relation(fields: [thesis_id], references: [id], onDelete: Cascade)

  @@id([thesis_id, tag_id])
  @@map("specializations")
}

model College {
  id          String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String       @unique
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  deleted_at  DateTime?    @db.Timestamp(6)
  updated_at  DateTime?    @db.Timestamp(6)
  departments Department[]

  @@map("colleges")
}

model Department {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name       String    @unique
  college_id String    @db.Uuid
  created_at DateTime  @default(now()) @db.Timestamp(6)
  deleted_at DateTime? @db.Timestamp(6)
  updated_at DateTime? @db.Timestamp(6)
  college    College   @relation(fields: [college_id], references: [id], onDelete: Cascade)
  profiles   Profile[]
  theses     Thesis[]

  @@map("departments")
}

model File {
  id                                    String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  file_path                             String
  file_type                             String             @db.VarChar
  created_at                            DateTime           @default(now()) @db.Timestamp(6)
  deleted_at                            DateTime?          @db.Timestamp(6)
  fileVersions                          FileVersion[]
  plagiarism_reports                    PlagiarismReport[]
  theses_theses_final_file_idTofiles    Thesis[]           @relation("theses_final_file_idTofiles")
  theses_theses_proposal_file_idTofiles Thesis[]           @relation("theses_proposal_file_idTofiles")

  @@map("files")
}

model ChatMessage {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  content     String
  sender_id   String    @db.Uuid
  receiver_id String    @db.Uuid
  created_at  DateTime  @default(now())
  deleted_at  DateTime? @db.Timestamp(6)
  updated_at  DateTime? @db.Timestamp(6)
  receiver    Profile   @relation("UserReceiver", fields: [receiver_id], references: [id])
  sender      Profile   @relation("UserSender", fields: [sender_id], references: [id])

  @@map("chat_messages")
}

model Notification {
  id           String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  content      String
  is_read      Boolean            @default(false)
  created_at   DateTime           @default(now())
  recipient_id String             @db.Uuid
  title        String             @db.VarChar
  deleted_at   DateTime?          @db.Timestamp(6)
  type         Notification_type?
  recipient    Profile            @relation(fields: [recipient_id], references: [id])

  @@map("notifications")
}

model FileVersion {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  thesis_id  String    @db.Uuid
  file_id    String    @db.Uuid
  version    Int
  created_at DateTime  @default(now())
  updated_at DateTime? @db.Timestamp(6)
  deleted_at DateTime? @db.Timestamp(6)
  file       File      @relation(fields: [file_id], references: [id])
  thesis     Thesis    @relation(fields: [thesis_id], references: [id])

  @@map("file_versions")
}

model ActivityLog {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id     String    @db.Uuid
  action      String
  target_type String
  target_id   String
  created_at  DateTime  @default(now())
  deleted_at  DateTime? @db.Timestamp(6)
  user        Profile   @relation(fields: [user_id], references: [id])

  @@map("activity_logs")
}

model PlagiarismReport {
  id               String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  thesis_id        String    @db.Uuid
  similarity_score Float
  report_file_id   String    @db.Uuid
  created_at       DateTime  @default(now())
  deleted_at       DateTime? @db.Timestamp(6)
  files            File      @relation(fields: [report_file_id], references: [id])
  thesis           Thesis    @relation(fields: [thesis_id], references: [id])

  @@map("plagiarism_reports")
}

model ReviewFeedback {
  id                                          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  review_id                                   String    @db.Uuid
  content                                     String
  created_at                                  DateTime  @default(now())
  deleted_at                                  DateTime? @db.Timestamp(6)
  feedbacker_id                               String    @db.Uuid
  users_review_feedbacks_feedbacker_idTousers Profile   @relation("review_feedbacks_feedbacker_idTousers", fields: [feedbacker_id], references: [id])
  users_review_feedbacks_review_idTousers     Review    @relation("review_feedbacks_review_idTousers", fields: [review_id], references: [id], map: "review_feedbacks_reviewer_id_fkey")

  @@map("review_feedbacks")
}

model AccessControl {
  id          String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id     String  @db.Uuid
  thesis_id   String  @db.Uuid
  can_edit    Boolean @default(false)
  can_approve Boolean @default(false)
  can_view    Boolean @default(true)
  thesis      Thesis  @relation(fields: [thesis_id], references: [id])
  user        Profile @relation(fields: [user_id], references: [id])

  @@map("access_controls")
}

model DefenseSchedule {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  thesis_id  String    @db.Uuid
  date       DateTime
  venue      String
  created_at DateTime  @default(now())
  deleted_at DateTime? @db.Timestamp(6)
  thesis     Thesis    @relation(fields: [thesis_id], references: [id])

  @@map("defense_schedules")
}

model Milestone {
  id         String    @id(map: "thesis_milestones_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  thesis_id  String    @db.Uuid
  title      String
  start_date DateTime  @db.Date
  end_date   DateTime  @db.Date
  completed  Boolean   @default(false)
  created_at DateTime  @default(now()) @db.Timestamp(6)
  deleted_at DateTime? @db.Timestamp(6)
  theses     Thesis    @relation(fields: [thesis_id], references: [id], map: "thesis_milestones_thesis_id_fkey")

  @@map("milestones")
}

model Advisers {
  thesis_id  String       @db.Uuid
  adviser_id String       @db.Uuid
  role       Adviser_role
  created_at DateTime     @default(now()) @db.Timestamptz(6)
  updated_at DateTime?    @db.Timestamp(6)
  deleted_at DateTime?    @db.Timestamp(6)
  profile    Profile      @relation(fields: [adviser_id], references: [id], onDelete: Cascade)
  thesis     Thesis       @relation(fields: [thesis_id], references: [id], onDelete: Cascade)

  @@id([thesis_id, adviser_id, role])
  @@map("advisers")
}

model Author {
  thesis_id  String    @db.Uuid
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  author_id  String    @db.Uuid
  updated_at DateTime? @db.Timestamp(6)
  deleted_at DateTime? @db.Timestamp(6)
  profile    Profile   @relation(fields: [author_id], references: [id], onDelete: Cascade)
  thesis     Thesis    @relation(fields: [thesis_id], references: [id], onDelete: Cascade, map: "thesis_participants_thesis_id_fkey")

  @@id([thesis_id, author_id])
  @@map("authors")
}

model Panelist {
  thesis_id   String    @db.Uuid
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  panelist_id String    @db.Uuid
  deleted_at  DateTime? @db.Timestamp(6)
  updated_at  DateTime? @db.Timestamp(6)
  profile     Profile   @relation(fields: [panelist_id], references: [id], onDelete: Cascade)
  thesis      Thesis    @relation(fields: [thesis_id], references: [id], onDelete: Cascade)

  @@id([thesis_id, panelist_id])
  @@map("panelists")
}

model Profile {
  id                                                     String           @id(map: "user_profiles_pkey") @db.Uuid
  first_name                                             String?          @db.VarChar(100)
  last_name                                              String?          @db.VarChar(100)
  id_number                                              String?          @unique(map: "user_profiles_idNumber_key") @db.VarChar(15)
  theme_preference                                       ThemePreference  @default(DARK)
  avatar                                                 String?          @db.VarChar(255)
  created_at                                             DateTime         @default(now()) @db.Timestamptz(6)
  updated_at                                             DateTime?        @db.Timestamptz(6)
  suffix_id                                              BigInt?
  department_id                                          String?          @db.Uuid
  role_id                                                Int?
  prefix_id                                              Int?
  accessControls                                         AccessControl[]
  activityLogs                                           ActivityLog[]
  advisers                                               Advisers[]
  authors                                                Author[]
  messagesReceived                                       ChatMessage[]    @relation("UserReceiver")
  messagesSent                                           ChatMessage[]    @relation("UserSender")
  notifications                                          Notification[]
  panelists                                              Panelist[]
  department                                             Department?      @relation(fields: [department_id], references: [id], onDelete: SetDefault)
  user                                                   User             @relation(fields: [id], references: [id], onDelete: Cascade)
  prefix                                                 Prefix?          @relation(fields: [prefix_id], references: [id], onDelete: SetDefault)
  role                                                   Role?            @relation(fields: [role_id], references: [id], onDelete: SetDefault)
  suffixes                                               Suffix?          @relation(fields: [suffix_id], references: [id], onDelete: SetDefault)
  review_feedbacks_review_feedbacks_feedbacker_idTousers ReviewFeedback[] @relation("review_feedbacks_feedbacker_idTousers")
  reviews                                                Review[]

  @@map("profiles")
}

model Review {
  id                                                 String           @id(map: "thesis_reviews_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  status                                             ReviewStatus?
  thesis_id                                          String           @db.Uuid
  reviewer_id                                        String           @db.Uuid
  feedback                                           String?
  created_at                                         DateTime         @default(now())
  deleted_at                                         DateTime?        @db.Timestamp(6)
  review_feedbacks_review_feedbacks_review_idTousers ReviewFeedback[] @relation("review_feedbacks_review_idTousers")
  users                                              Profile          @relation(fields: [reviewer_id], references: [id])
  theses                                             Thesis           @relation(fields: [thesis_id], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Role {
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  name       String    @unique @db.VarChar
  updated_at DateTime? @db.Timestamptz(6)
  id         Int       @id @default(autoincrement())
  profiles   Profile[]

  @@map("roles")
}

model SpecializationTag {
  id              BigInt                 @id @default(autoincrement())
  name            String                 @unique @db.VarChar
  created_at      DateTime               @default(now()) @db.Timestamptz(6)
  deleted_at      DateTime?              @db.Timestamp(6)
  specializations ThesisSpecialization[]

  @@map("specialization_tags")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Prefix {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar
  description String    @db.VarChar
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  deleted_at  DateTime? @db.Timestamptz(6)
  profiles    Profile[]

  @@map("prefixes")
}

model User {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email              String    @unique @db.VarChar
  encrypted_password String?   @db.VarChar
  created_at         DateTime  @default(now()) @db.Timestamptz(6)
  updated_at         DateTime? @db.Timestamptz(6)
  deleted_at         DateTime? @db.Timestamptz(6)
  is_anonymous       Boolean   @default(false)
  last_signed_in     DateTime? @db.Timestamptz(6)
  is_active          Boolean?  @default(false)
  profiles           Profile?

  @@map("users")
}

model Suffix {
  id          BigInt    @id @default(autoincrement())
  name        String    @unique @db.VarChar
  description String
  created_at  DateTime  @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  profiles    Profile[]

  @@map("suffixes")
}

view ApprovedThesisView {
  id              String   @unique @db.Uuid
  title           String?
  abstract        String?
  year            Int?
  file_path       String?
  department      String?
  college         String?
  authors         String[]
  adviser         String?
  panelists       String[]
  specializations String[] @db.VarChar

  @@map("approved_theses_view")
}

view ThesisProposalView {
  id              String        @unique @db.Uuid
  title           String?
  status          ThesisStatus?
  file_path       String?
  department      String?
  college         String?
  authors         String[]
  adviser         String?
  panelists       String[]
  specializations String[]      @db.VarChar

  @@map("thesis_proposals_view")
}

view AdviserView {
  prefix     String?       @db.VarChar
  first_name String?       @db.VarChar(100)
  last_name  String?       @db.VarChar(100)
  suffix     String?       @db.VarChar
  status     ThesisStatus?
  adviser_id String        @db.Uuid
  thesis_id  String        @db.Uuid

  @@id([thesis_id, adviser_id])
  @@map("advisers_view")
}

view AuthorView {
  first_name String?       @db.VarChar(100)
  last_name  String?       @db.VarChar(100)
  status     ThesisStatus?
  author_id  String        @db.Uuid
  thesis_id  String        @db.Uuid

  @@id([thesis_id, author_id])
  @@map("authors_view")
}

view PanelistView {
  prefix      String?       @db.VarChar
  first_name  String?       @db.VarChar(100)
  last_name   String?       @db.VarChar(100)
  suffix      String?       @db.VarChar
  status      ThesisStatus?
  panelist_id String        @db.Uuid
  thesis_id   String        @db.Uuid

  @@id([thesis_id, panelist_id])
  @@map("panelists_view")
}

enum ThemePreference {
  LIGHT
  DARK

  @@map("theme_preference")
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
  REVISION_REQUIRED

  @@map("review_status")
}

enum ThesisStatus {
  PROPOSAL_SUBMITTED
  UNDER_REVIEW
  FINAL_MANUSCRIPT
  APPROVED
  REJECTED

  @@map("thesis_status")
}

enum Adviser_role {
  ADVISER
  CO_ADVISER

  @@map("adviser_role")
}

enum Notification_type {
  THESIS_SUBMISSION
  THESIS_APPROVAL
  THESIS_REJECTION
  REVIEW_FEEDBACK
  MESSAGE_RECEIVED
  DEFENSE_SCHEDULED
  PLAGIARISM_REPORT_AVAILABLE
  DEADLINE_REMINDER
  SYSTEM_ALERT
  ACCESS_GRANTED

  @@map("notification_type")
}
